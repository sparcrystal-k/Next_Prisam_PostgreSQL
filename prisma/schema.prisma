generator client {
  provider        = "prisma-client-js"
  output          = "../src/db/prisma"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["public"]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model profiles {
  id           String     @id @db.Uuid
  full_name    String?
  email        String?
  phone_number String?
  address      String?
  role         String     @default("renter")
  created_at   DateTime   @default(now()) @db.Timestamptz(6)
  updated_at   DateTime?  @default(now()) @db.Timestamptz(6)
  requests     requests[]
  property     property[]

  @@schema("public")
}

model category {
  id       String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title    String
  requests requests[]
  property property[]

  @@schema("public")
}

model currency {
  id       String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title    String
  requests requests[]
  property property[]

  @@schema("public")
}

model property {
  id              String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title           String?
  description     String?
  category_id     String?   @db.Uuid
  owner_id        String    @db.Uuid
  price_min       Float?
  price_max       Float?
  currency_id     String?   @db.Uuid
  location        String?
  available_begin DateTime? @db.Timestamptz(6)
  available_end   DateTime? @db.Timestamptz(6)
  status          String    @default("pending")
  created_at      DateTime  @default(now()) @db.Timestamptz(6)
  updated_at      DateTime? @default(now()) @db.Timestamptz(6)

  images   property_images[]
  offers   offers[]
  owner    profiles          @relation(fields: [owner_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  category category?         @relation(fields: [category_id], references: [id], onDelete: SetNull, onUpdate: NoAction)
  currency currency?         @relation(fields: [currency_id], references: [id], onDelete: SetNull, onUpdate: NoAction)

  @@schema("public")
}

model property_images {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  property_id String    @db.Uuid
  path        String
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)

  property property @relation(fields: [property_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("public")
}

model requests {
  id                  String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  profile_id          String    @db.Uuid
  flexible_by_region  Boolean?  @default(false)
  flexible_by_country Boolean?  @default(false)
  location            String?
  category_id         String    @db.Uuid
  price_min           Float
  price_max           Float
  currency_id         String    @db.Uuid
  start_date          String
  end_date            String
  num_guests          Int
  amenities           Json      @db.Json
  message             String
  status              String    @default("pending")
  created_at          DateTime  @default(now()) @db.Timestamptz(6)
  updated_at          DateTime? @default(now()) @db.Timestamptz(6)

  profile  profiles @relation(fields: [profile_id], references: [id])
  currency currency @relation(fields: [currency_id], references: [id])
  category category @relation(fields: [category_id], references: [id])
  offers   offers[]

  @@schema("public")
}

model offers {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  property_id String   @db.Uuid
  property    property @relation(fields: [property_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  request_id  String   @db.Uuid
  request     requests @relation(fields: [request_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  status      String   @default("awaiting") // awaiting, accepted, rejected, completed
  comment     String

  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  @@schema("public")
}

model notifications {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  from       String?  @db.Uuid
  to         String?  @db.Uuid
  collection String?
  type       String?
  title      String?
  message    String?
  data       Json?    @db.Json
  link       String?
  viewed     Boolean  @default(false)
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  @@schema("public")
}
